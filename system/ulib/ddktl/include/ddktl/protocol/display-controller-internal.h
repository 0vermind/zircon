// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// WARNING: This file is machine generated by fidlc.

#pragma once

#include <ddk/protocol/display-controller.h>
#include <fbl/type_support.h>

namespace ddk {
namespace internal {

DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(
    has_display_controller_interface_on_displays_changed,
    DisplayControllerInterfaceOnDisplaysChanged,
    void (C::*)(const added_display_args_t* added_display_list, size_t added_display_count,
                const uint64_t* removed_display_list, size_t removed_display_count,
                added_display_info_t* out_display_info_list, size_t display_info_count,
                size_t* out_display_info_actual));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_interface_on_display_vsync,
                                     DisplayControllerInterfaceOnDisplayVsync,
                                     void (C::*)(uint64_t display_id, int64_t timestamp,
                                                 const uint64_t* handle_list, size_t handle_count));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_interface_get_audio_format,
                                     DisplayControllerInterfaceGetAudioFormat,
                                     zx_status_t (C::*)(uint64_t display_id, uint32_t fmt_idx,
                                                        audio_stream_format_range_t* out_fmt));

template <typename D>
constexpr void CheckDisplayControllerInterfaceSubclass() {
    static_assert(
        internal::has_display_controller_interface_on_displays_changed<D>::value,
        "DisplayControllerInterface subclasses must implement "
        "void DisplayControllerInterfaceOnDisplaysChanged(const added_display_args_t* "
        "added_display_list, size_t added_display_count, const uint64_t* removed_display_list, "
        "size_t removed_display_count, added_display_info_t* out_display_info_list, size_t "
        "display_info_count, size_t* out_display_info_actual");
    static_assert(internal::has_display_controller_interface_on_display_vsync<D>::value,
                  "DisplayControllerInterface subclasses must implement "
                  "void DisplayControllerInterfaceOnDisplayVsync(uint64_t display_id, int64_t "
                  "timestamp, const uint64_t* handle_list, size_t handle_count");
    static_assert(internal::has_display_controller_interface_get_audio_format<D>::value,
                  "DisplayControllerInterface subclasses must implement "
                  "zx_status_t DisplayControllerInterfaceGetAudioFormat(uint64_t display_id, "
                  "uint32_t fmt_idx, audio_stream_format_range_t* out_fmt");
}

DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(
    has_display_controller_protocol_set_display_controller_interface,
    DisplayControllerSetDisplayControllerInterface,
    void (C::*)(const display_controller_interface_t* intf));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_protocol_import_vmo_image,
                                     DisplayControllerImportVmoImage,
                                     zx_status_t (C::*)(image_t* image, zx_handle_t vmo,
                                                        size_t offset));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_protocol_release_image,
                                     DisplayControllerReleaseImage, void (C::*)(image_t* image));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(
    has_display_controller_protocol_check_configuration, DisplayControllerCheckConfiguration,
    uint32_t (C::*)(const display_config_t** display_config_list, size_t display_config_count,
                    uint32_t** out_layer_cfg_result_list, size_t* layer_cfg_result_count));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_protocol_apply_configuration,
                                     DisplayControllerApplyConfiguration,
                                     void (C::*)(const display_config_t** display_config_list,
                                                 size_t display_config_count));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_protocol_compute_linear_stride,
                                     DisplayControllerComputeLinearStride,
                                     uint32_t (C::*)(uint32_t width,
                                                     zx_pixel_format_t pixel_format));
DECLARE_HAS_MEMBER_FN_WITH_SIGNATURE(has_display_controller_protocol_allocate_vmo,
                                     DisplayControllerAllocateVmo,
                                     zx_status_t (C::*)(uint64_t size, zx_handle_t* out_vmo));

template <typename D>
constexpr void CheckDisplayControllerProtocolSubclass() {
    static_assert(
        internal::has_display_controller_protocol_set_display_controller_interface<D>::value,
        "DisplayControllerProtocol subclasses must implement "
        "void DisplayControllerSetDisplayControllerInterface(const display_controller_interface_t* "
        "intf");
    static_assert(internal::has_display_controller_protocol_import_vmo_image<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "zx_status_t DisplayControllerImportVmoImage(image_t* image, zx_handle_t vmo, "
                  "size_t offset");
    static_assert(internal::has_display_controller_protocol_release_image<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "void DisplayControllerReleaseImage(image_t* image");
    static_assert(internal::has_display_controller_protocol_check_configuration<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "uint32_t DisplayControllerCheckConfiguration(const display_config_t** "
                  "display_config_list, size_t display_config_count, uint32_t** "
                  "out_layer_cfg_result_list, size_t* layer_cfg_result_count");
    static_assert(internal::has_display_controller_protocol_apply_configuration<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "void DisplayControllerApplyConfiguration(const display_config_t** "
                  "display_config_list, size_t display_config_count");
    static_assert(internal::has_display_controller_protocol_compute_linear_stride<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "uint32_t DisplayControllerComputeLinearStride(uint32_t width, zx_pixel_format_t "
                  "pixel_format");
    static_assert(internal::has_display_controller_protocol_allocate_vmo<D>::value,
                  "DisplayControllerProtocol subclasses must implement "
                  "zx_status_t DisplayControllerAllocateVmo(uint64_t size, zx_handle_t* out_vmo");
}

} // namespace internal
} // namespace ddk
